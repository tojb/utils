#!/usr/bin/perl
#perl scrip to change a .x file to a string of pdbs
#
#
#
#to run:$ perl -w script.prl
#josh.

##############################################
# Parameters:
#
$pi              = 3.14159265358979323846;

#accept if passed in as arguments.
if( scalar ( @ARGV ) == 4 )
{
	$inPDBName       = shift;
	$thetaDegrees[0] = shift;
	$thetaDegrees[1] = shift;
	$thetaDegrees[2] = shift;
}
else
{
	print "pdbRotate: args are: input pdb, rotations about x y z.\n";
	print "eg  pdbRotate skewy.pdb 0 45 0 > catch.pdb \n";
	print "This version modified to take arbitrary precision coordinates\n";

	die;
}


##############################################
#
#open the file
open( my $inPDB,  $inPDBName )    or die "Couldn't read $inPDBName: $!";

$nLines        = 0;
$nAtoms        = 0;
$fileNumber    = 1;
$writeThisFile = 0;



##############################################
#set up some of the maths:
#Rotation vector in degrees about x, y, z axes; in order.
$theta[0]        = ( $thetaDegrees[0] * $pi ) / 180;
$theta[1]        = ( $thetaDegrees[1] * $pi ) / 180;
$theta[2]        = ( $thetaDegrees[2] * $pi ) / 180;



#read through the pdb by lines.
while ( $pdbLine = <$inPDB> ) 
{
	#match in coordinates
	if ( $pdbLine =~ /(ATOM)(\s+\S+\s+\S+\s+\S+\s+\S+)(\s+)(\S+)(\s+)(\S+)(\s+)(\S+)(\s+)(\S+\s+\S+)/ )
	{
	    #the regexp automatically dumps the coords into these numbered variables.
	    $x = $4;
	    $y = $6;
	    $z = $8;

#	    print "x:$x     y:$y     z:$z\n";

	    #perform transformations: rotations about x, y and z in order.
	    $y_new = $y * cos( $theta[0] ) - $z * sin( $theta[0] ) ;
	    $z_new = $y * sin( $theta[0] ) + $z * cos( $theta[0] ) ;	
	    $y = $y_new;	
	    $z = $z_new;

	    $x_new = $x *  cos( $theta[1] )  + $z * sin( $theta[1] );
	    $z_new = $x * -sin( $theta[1] )  + $z * cos( $theta[1] );
	    $x = $x_new;	
	    $z = $z_new;

	    $x_new = $x * cos( $theta[2] ) - $y * sin( $theta[2] );
	    $y_new = $x * sin( $theta[2] ) + $y * cos( $theta[2] );
	
	    $x = $x_new;
	    $y = $y_new;
	    $z = $z_new;
	    
#	    print "x:$x     y:$y     z:$z\n\n";


	    
	    #depending on the size of the number it eats into 
	    #the leading spaces
	    $xLeadingSpaces = length($4) + length($3) - length($x);
	    if( $xLeadingSpaces <= 0 )
	    {; }#die "format hassles here \n";}	
	    $xLead = " ";
	    for( my $j = 0; $j < $xLeadingSpaces - 1; $j++)	
	    {$xLead = $xLead." ";}

	    $yLeadingSpaces = length($6) + length($5) - length($y);
	    if( $yLeadingSpaces <= 0 )
	    {; }#die "format hassles here \n";}	
	    $yLead = " ";
	    for( my $j = 0; $j < $yLeadingSpaces - 1; $j++)	
	    {$yLead = $yLead." ";}

	    $zLeadingSpaces = length($8) + length($7) - length($z);
	    if( $zLeadingSpaces <= 0 )
	    {; }#die "format hassles here \n";}	
	    $zLead = " ";
	    for( my $j = 0; $j < $zLeadingSpaces - 1; $j++)	
	    {$zLead = $zLead." ";}

		
	    $pdbLine = "ATOM".$2.$xLead.$x.$yLead.$y.$zLead.$z.$9.$10;
			
	    print $pdbLine."\n";	

	 }
   	 else
	 {
	     print $pdbLine;
	 }
  }

#all done
close  $inPDB;		
		 
      
