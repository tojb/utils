#!/usr/bin/perl

$coord_width   = 13;
$angle_width   = 12;
##hang on... this ought to be as big as 2*max coords less 1 for a sign bit
$boxinfo_width = 11; 

$headerLines = 8;
$headerBox_thLine = 5;


$atomCount   = 1;
$storedCount = 0;

$inFileName=shift;
if( scalar(@ARGV) > 0 ) {
        $mulBy=shift;
}
else {
        print "Usage: ./etjFrameMultiply.prl frame.etj multiplyFactor\n";
}

open( $inFile, $inFileName ) or die "failed to open file: $inFileName";


##read the frame
while($line = <$inFile>) {
    $outFrame[$storedCount++] = $line;
    if( length( $line ) < 2 ) {
        $outFrame[$storedCount++] = "\n";
        last;
    }
}

##set correct number of atoms in new system
$numberLine  = $outFrame[1];
@asList      = split( $numberLine, /\s+/ );
$numberAtoms    = $asList[1];
$newNumberAtoms = $mulBy * $mulBy * $mulBy * $asList[1];
$outFrame[1] = "\#Number $numberAtoms\n";

##set correct box info in the new header
$boxLine=$outFrame[1];

$boxX = substr($boxLine, 1,                     $boxinfo_width);
$boxY = substr($boxLine, 1+     $boxinfo_width, $boxinfo_width);
$boxZ = substr($boxLine, 1+ 2 * $boxinfo_width, $boxinfo_width);

$outFrame[$headerBox_thLine]     ="\#Boxx ".$boxX * $mulBy."\n";
$outFrame[$headerBox_thLine + 1] ="\#Boxy ".$boxY * $mulBy."\n";
$outFrame[$headerBox_thLine + 2 ]="\#Boxz ".$boxZ * $mulBy."\n";

##write out the new header
for( $i = 0; $i < $headerLines; $i++ ) {
        print $outFrame[$i];
}

##write out the atom coordinates
for( $i = $headerLines; $i < $numberAtoms + $headerLines; $i++ ) {

        print $outFrame[$i];
        
}















